/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package POE_RESUBMISSION;

import javax.swing.JOptionPane;

public class App {

    public static Task task1 = new Task(); // Create an instance of the Task class

    public static void main(String[] args) {

        Login user1 = new Login(); // Create an instance of the Login class
        String user = "";
        String password = "";
        String firstName = "";
        String lastName = "";

        // User registration loop
        while (user1.checkUserName(user) == false || user1.checkPasswordComplexity(password) == false) {
            JOptionPane.showMessageDialog(null, "Please fill in the following inputs to Register: ");
            user = JOptionPane.showInputDialog("Enter the username:");
            password = JOptionPane.showInputDialog("Enter the password:");
            firstName = JOptionPane.showInputDialog("Enter your First Name:");
            lastName = JOptionPane.showInputDialog("Enter your Last Name:");

            user1.registerUser(firstName, lastName, user, password);
        }

        boolean checkLoginDetails = false;
        // User login loop
        while (!checkLoginDetails) {
            JOptionPane.showMessageDialog(null, "Please fill in the following inputs to Login: ");
            user = JOptionPane.showInputDialog("Enter the username:");
            password = JOptionPane.showInputDialog("Enter the password:");

            if (user1.loginUser(user, password)) {
                checkLoginDetails = true;
                System.out.println("here");
                JOptionPane.showMessageDialog(null, user1.returnLoginStatus(user, password, firstName, lastName));

                //Start of Task Class
                int SIZE = 20;
                String[] taskNames = new String[SIZE];
                String[] taskStatuses = new String[SIZE];
                String[] developerNames = new String[SIZE];

                int[] taskHours = new int[SIZE];

                String taskDescription = "";
                int taskNumber = 0;

                String taskID = "";

                for (int i = 0; i < 19; i++) {
                    taskNames[i] = "";
                    taskStatuses[i] = "";
                    taskHours[i] = 0;
                    developerNames[i] = "";
                }

                int taskOptions = 0;
                JOptionPane.showMessageDialog(null, "Welcome to EasyKhanban");

                // Task management loop
                while (taskOptions != 8) {
                    taskOptions = Integer.parseInt(JOptionPane.showInputDialog("Task Options:\nOption 1) Add Tasks\nOption 2) Show Report\nOption 3) Display Done Tasks\nOption 4) Display Longest Task\nOption 5) Search Task Name\nOption 6) Search Developer Name\nOption 7) Delete Task\nOption 8) Quit\n"));

                    switch (taskOptions) {
                        case 1:
                            int numberOfTasks = Integer.parseInt(JOptionPane.showInputDialog("Enter number of Tasks to add: "));
                            // Task creation loop
                            for (int count = 0; count < numberOfTasks; count++) {
                                taskNames[count] = JOptionPane.showInputDialog("Task Name:");
                                System.out.println("Task Name: " + taskNames[count]);
                                // Set task properties
                                task1.setTaskName(taskNames[count]);
                                taskDescription = JOptionPane.showInputDialog("Task Description:");
                                task1.setTaskDescription(taskDescription);
                                if (!task1.checkTaskDescription(taskDescription)) {
                                    JOptionPane.showMessageDialog(null, "Please enter a task description of less than 50 characters");
                                } else {
                                    JOptionPane.showMessageDialog(null, "Task successfully captured");
                                }
                                taskNumber = count;
                                task1.setTaskNumber(taskNumber);
                                developerNames[count] = JOptionPane.showInputDialog("Developer First Name and Last Name:");
                                System.out.println("Developer Name: " + developerNames[count]);
                                task1.setDeveloperName(developerNames[count]);
                                String t = null;
                                taskID = task1.createTaskID();
                                taskHours[count] = Integer.parseInt(JOptionPane.showInputDialog("Task Hours:"));
                                System.out.println("Task duration: " + taskHours[count]);
                                task1.setHours(taskHours[count]);

                                int taskStatusOption;
                                String statVal = "";
                                do {
                                    taskStatusOption = Integer.parseInt(JOptionPane.showInputDialog("Task Status:\nOption 1) Done\nOption 2) To Do\nOption 3) Doing\n"));
                                    switch (taskStatusOption) {
                                        case 1:
                                            statVal = "Done";
                                            break;
                                        case 2:
                                            statVal = "To Do";
                                            break;
                                        case 3:
                                            statVal = "Doing";
                                            break;
                                        default:
                                            JOptionPane.showMessageDialog(null, "Invalid Option");
                                            break;
                                    }
                                } while (taskStatusOption < 1 || taskStatusOption > 3);

                                task1.setStatus(statVal);
                                taskStatuses[count] = statVal;
                                System.out.println("Task status: " + taskStatuses[count]);
                            }
                            System.out.println("Out Loop");

                            break;
                        case 2:
                            // Option 2: Show Report
                            String output = "";
                            for (int i = 0; i <= taskNumber; i++) {
                                output += "Developer: " + developerNames[i] + "\n Task Name: " + taskNames[i] + "\n Task Duration: " + taskHours[i] + "\n Status: " + taskStatuses[i] + "\n";

                            }
                            JOptionPane.showMessageDialog(null, output);

                            break;
                        case 3:
                            // Option 3: Display Done Tasks
                            String output2 = "";

                            for (int i = 0; i <= taskNumber; i++) {

                                if (taskStatuses[i].equals("Done")) {
                                    //System.out.println("Task Status: " + taskStatuses[i]); 
                                    output2 += "Developer: " + developerNames[i] + "\n Task Name: " + taskNames[i] + "\n Task Duration: " + taskHours[i] + "\n";

                                }

                            }
                            JOptionPane.showMessageDialog(null, output2);

                            break;
                        case 4:
                            // Option 4: Display Longest Task
                            int n = SIZE;
                            int temp = 0;
                            String tempStatus = "";
                            String tempName = "";
                            String tempDev = "";
                            for (int i = 0; i < taskHours.length - 1; i++) {
                                for (int j = 0; j < (taskHours.length - i - 1); j++) {
                                    if (taskHours[j] < taskHours[j + 1]) {
                                        // Swap task details for sorting
                                        temp = taskHours[j];
                                        taskHours[j] = taskHours[j + 1];
                                        taskHours[j + 1] = temp;

                                        tempStatus = taskStatuses[j];
                                        taskStatuses[j] = taskStatuses[j + 1];
                                        taskStatuses[j + 1] = tempStatus;

                                        tempName = taskNames[j];
                                        taskNames[j] = taskNames[j + 1];
                                        taskNames[j + 1] = tempName;

                                        tempDev = developerNames[j];
                                        developerNames[j] = developerNames[j + 1];
                                        developerNames[j + 1] = tempDev;
                                    }
                                }

                            }

                            JOptionPane.showMessageDialog(null, developerNames[0] + ", " + taskHours[0]);
                            break;

                        case 5:
                             // Option 5: Search Task Name
                            String searchTaskName = JOptionPane.showInputDialog("\nEnter task name to search: ");
                            boolean found = false;
                            String output1 = "";

                            for (int i = 0; i <= taskNumber; i++) {
                                if (taskNames[i].equalsIgnoreCase(searchTaskName)) {
                                    found = true;
                                    output1 += "Developer: " + developerNames[i] + "\n Task Name: " + taskNames[i] + "\n Task Status: " + taskStatuses[i] + "\n";

                                }
                            }
                            JOptionPane.showMessageDialog(null, output1);

                            if (!found) {
                                JOptionPane.showMessageDialog(null, "Task not found.");
                            }

                            break;
                        case 6:
                            // Option 6: Search Developer Name
                            String output3 = "";
                            found = false;
                            String searchDeveloper = JOptionPane.showInputDialog(null, "Enter developer name");
                            for (int i = 0; i <= taskNumber; i++) {
                                if (developerNames[i].equalsIgnoreCase(searchDeveloper)) {
                                    found = true;
                                    output3 += "\n Task Name: " + taskNames[i] + "\n Task Status: " + taskStatuses[i] + "\n";

                                }
                            }
                            JOptionPane.showMessageDialog(null, output3);

                            if (!found) {
                                JOptionPane.showMessageDialog(null, "No tasks assigned to this developer.");
                            }

                            break;
                        case 7:
                            // Option 7: Delete Task
                            String deleteTaskName = JOptionPane.showInputDialog("\nEnter task name to delete: ");
                            int indexToDelete = -1;
                            for (int i = 0; i <= taskNumber; i++) {

                                if (taskNames[i].equals(deleteTaskName)) {
                                    indexToDelete = i;

                                }

                            }
                            if (indexToDelete != -1) {
                                // Shift array elements to remove the deleted task
                                for (int i = indexToDelete; i < taskNames.length - 1; i++) {
                                    taskNames[i] = taskNames[i + 1];
                                    developerNames[i] = developerNames[i + 1];
                                    taskHours[i] = taskHours[i + 1];
                                    taskStatuses[i] = taskStatuses[i + 1];

                                }
                                taskNumber--;
                                JOptionPane.showMessageDialog(null, "Entry " + deleteTaskName + " has been deleted.");
                            } else {
                                JOptionPane.showMessageDialog(null, "Entry " + deleteTaskName + " does not exist.");
                            }

                            break;
                        case 8:
                            // Option 8: Quit
                            JOptionPane.showMessageDialog(null, "Quitting Kanban");
                            break;

                        default:
                            // Default case for invalid options
                            JOptionPane.showMessageDialog(null, "Invalid Option");

                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, user1.returnLoginStatus(user, password, firstName, lastName));
            }

        }

    }

}
